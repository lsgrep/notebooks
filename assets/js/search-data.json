{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://lsgrep.github.io/jupyter/2020/12/23/Hello-World.html",
            "relUrl": "/jupyter/2020/12/23/Hello-World.html",
            "date": " • Dec 23, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Disable Ubuntu Systemd Resolved",
            "content": "In Ubuntu, if you want to use custom DNS services which most likely run on port 53 you have to disable systemd-resolved first to vacate the port. . edit /etc/systemd/resolved.conf Add two lines: | . DNS=8.8.8.8 . DNSStubListener=no . # This file is part of systemd. # # systemd is free software; you can redistribute it and/or modify it # under the terms of the GNU Lesser General Public License as published by # the Free Software Foundation; either version 2.1 of the License, or # (at your option) any later version. # # Entries in this file show the compile time defaults. # You can change settings by editing this file. # Defaults can be restored by simply deleting this file. # # See resolved.conf(5) for details [Resolve] DNS=8.8.8.8 #FallbackDNS= #Domains= #DNSSEC=no #DNSOverTLS=no #MulticastDNS=no #LLMNR=no #Cache=no-negative DNSStubListener=no #ReadEtcHosts=yes #ResolveUnicastSingleLabel=no . sudo systemctl restart systemd-resolved | . All set. .",
            "url": "https://lsgrep.github.io/ubuntu/systemd/2020/01/27/Disabling-Systemd-Resolved.html",
            "relUrl": "/ubuntu/systemd/2020/01/27/Disabling-Systemd-Resolved.html",
            "date": " • Jan 27, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Setting up a media server with Jellyfin",
            "content": "I have an Ubuntu desktop machine with an old Nvidia card. It has OKish specs, but it is a bit noisy for my liking. In short, I’ve made it into a publicly accessible Jellyfin media server with Traefik+Wireguard and moved it to the corner of my place with USB WiFi stick plugged in. . WiFi . You have install kernel drivers for the WiFi stick first, and the drivers are vendor specific. . | check available devices . | . iwconfig . wlp4s0 is the device name for my USB WiFi stick. . bring the device up | . sudo ifconfig wlp4s0 up . check available wireless networks | . sudo iwlist wlp4s0 scan | grep ESSID . connect to the network | . # generate &amp; save password wpa_passphrase your-ESSID your-wifi-passphrase | sudo tee /etc/wpa_supplicant.conf # -B is for running things in background sudo wpa_supplicant -B -c /etc/wpa_supplicant.conf -i wlp4s0 # get an IP address sudo dhclient wlp4s0 . Autoconnect to WiFi after reboot | . # crontab for the root sudo crontabe -u root -e # content of crontab # @reboot sleep 5 &amp;&amp; /usr/local/bin/wifi.sh 2&gt;&amp;1 &gt;&gt; /var/log/reboot.log . #!/bin/bash # wifi.sh /usr/sbin/rfkill unblock wifi || true /sbin/ifconfig wlp4s0 up || true /sbin/wpa_supplicant -B -c /etc/wpa_supplicant.conf -i wlp4s0 || true /sbin/dhclient wlp4s0 || true . Disable WiFi power saving . Disable wifi power management directly by editing /etc/NetworkManager/conf.d/default-wifi-powersave-on.conf and changed the value from 3 to 2, saved changes and reboot. | . | Performance Tweaks . | . # To ameliorate the connection through the intel wifi card you can: # Disable 802.11n # Enable software encryption # Enable the transmission antenna aggregation # Disable bluetooth coexistence # Create a /etc/modprobe.d/iwlwifi.conf with the following content : options iwlwifi 11n_disable=1 options iwlwifi swcrypto=1 options iwlwifi 11n_disable=8 options iwlwifi bt_coex_active=0 . Remote Desktop . I’ve tried lots of things for remote desktop, then settled for Chrome Remote Desktop. Official docs are not so reliable, and this gist did the trick. . Honestly I don’t use this at all, but I think it is nice to have. . 400: Invalid request . https://gist.github.com/organizm/ae09f72bd5badc64d4727a0d38fc590b . Media Server . Jellyfin is free &amp; open source, and it is not bloated with ads. Start Jellyfin with Nvidia hardware acceleration enabled(You can check out docs for more). Docker-compose is buggy with GPUs, so I have to use command line for this. You have to install nvidia-docker2 before hand. | . docker run -d --name=jellyfin -e NVIDIA_DRIVER_CAPABILITIES=all -e NVIDIA_VISIBLE_DEVICES=all --gpus all --pid host --runtime=nvidia -p 8096:8096 -p 8920:8920 -v /data/jellyfin/config:/config -v /data/jellyfin/media:/media -v /data/jellyfin/cache:/cache --restart unless-stopped jellyfin/jellyfin:unstable . Since it is sharing(--pid host) PID namespace with host, you can run nvidia-smi on host machine directly to see if Jellyfin is using GPU when transcoding content. . . Register an OpenSubtitles.org account and install the plugin for the Jellyfin. You have to login with your account in the plugin settings page. With this you can add subtitles to your videos without too much effort. | . Syncing Remote Folders . rclone is kinda aggressive, so you have to use --max-delete 0 to keep your files intact in your destination. . rclone sync --max-delete 0 -v REMOTE_DRIVE:legal_movies movies --stats 10s . Internet Access . The desktop is connected to a VPS instance with WireGuard. WireGuard is pretty easy to setup. . Here is the Traefik configuration on the VPS instance. . A somewhat secure Traefik frontend with automated TLS certificates. . # docker-compose.yaml version: &#39;3.8&#39; services: traefik: image: traefik:v2.3 restart: always ports: - &quot;80:80&quot; - &quot;443:443&quot; volumes: - &quot;/var/log/traefik:/var/log/traefik&quot; # save certs so that you won&#39;t DDOS letencrypt servers after restart - &quot;$PWD/certs:/letsencrypt&quot; - &quot;/var/run/docker.sock:/var/run/docker.sock:ro&quot; - &quot;$PWD/services/traefik/:/etc/traefik/&quot; labels: - &quot;traefik.enable=true&quot; - &quot;traefik.http.routers.dashboard.rule=Host(`DOMAIN_FOR_DASHBOARD`)&quot; - &quot;traefik.http.routers.dashboard.entrypoints=websecure&quot; - &quot;traefik.http.routers.dashboard.tls.certresolver=letsencrypt&quot; - &quot;traefik.http.routers.dashboard.service=api@internal&quot; ### basic auth - &quot;traefik.http.routers.dashboard.middlewares=auth&quot; # admin admin; echo $(htpasswd -nb admin admin) | sed -e s/ $/ $ $/g - &quot;traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$k.B4XC1H$$s0IZDaqRa4BX0MwcMHXnD/&quot; ### compression - &quot;traefik.http.middlewares.test-compress.compress=true&quot; - &quot;traefik.http.middlewares.test-compress.compress.excludedcontenttypes=text/event-stream&quot; ### Security related - &quot;traefik.http.middlewares.test-security.headers.SSLRedirect=true&quot; #### Note that this uses SSLHost verbatim, so add the port to SSLHost if you are using an alternate port. - &quot;traefik.http.middlewares.test-security.headers.SSLForceHost=true&quot; #### The stsSeconds is the max-age of the Strict-Transport-Security header. If set to 0, would NOT include the header. - &quot;traefik.http.middlewares.test-security.headers.STSSeconds=315360000&quot; #### The stsIncludeSubdomains is set to true, the includeSubDomains directive will be #### appended to the Strict-Transport-Security header. - &quot;traefik.http.middlewares.test-security.headers.STSIncludeSubdomains=true&quot; #### Set stsPreload to true to have the preload flag appended to the Strict-Transport-Security header. - &quot;traefik.http.middlewares.test-security.headers.STSPreload=true&quot; #### Set forceSTSHeader to true, to add the STS header even when the connection is HTTP. - &quot;traefik.http.middlewares.test-security.headers.forceSTSHeader=true&quot; #### Set frameDeny to true to add the X-Frame-Options header with the value of DENY. - &quot;traefik.http.middlewares.test-security.headers.frameDeny=true&quot; #### Set contentTypeNosniff to true to add the X-Content-Type-Options header with the value nosniff. - &quot;traefik.http.middlewares.test-security.headers.contentTypeNosniff=true&quot; #### Set browserXssFilter to true to add the X-XSS-Protection header with the value 1; mode=block. - &quot;traefik.http.middlewares.test-security.headers.browserXSSFilter=true&quot; ### - &quot;traefik.http.middlewares.test-security.headers.contentSecurityPolicy=frame-ancestors &#39;self&#39;;&quot; - &quot;traefik.http.middlewares.test-security.headers.referrerPolicy=strict-origin&quot; - &quot;traefik.http.middlewares.test-security.headers.featurePolicy=microphone &#39;none&#39;; geolocation &#39;none&#39;&quot; . #services/traefik/traefik.toml [entryPoints] [entryPoints.web] address = &quot;:80&quot; [entryPoints.web.http] [entryPoints.web.http.redirections] [entryPoints.web.http.redirections.entryPoint] to = &quot;websecure&quot; scheme = &quot;https&quot; [entryPoints.websecure] address = &quot;:443&quot; [api] dashboard = true [accessLog] filePath = &quot;/var/log/traefik/access.log&quot; [log] filePath = &quot;/var/log/traefik/traefik.log&quot; format = &quot;json&quot; level = &quot;DEBUG&quot; [metrics] [metrics.prometheus] [providers] [providers.docker] exposedByDefault = false [providers.file] directory = &quot;/etc/traefik/dynamic/&quot; [certificatesResolvers.letsencrypt.acme] # your email address email = &quot;&quot; storage = &quot;/letsencrypt/acme.json&quot; [certificatesResolvers.letsencrypt.acme.httpChallenge] entryPoint = &quot;web&quot; . # services/traefik/dynamic/custom.yml http: middlewares: auth: basicAuth: users: # admin admin; htpasswd -nb admin admin - &quot;admin:$apr1$2p9L2YyO$6cnp6nqaF6Xgz9qdIGp/z1&quot; routers: jellyfin: middlewares: # extra basic auth if necessary - auth rule: Host(`YOUR_DOMAIN_NAME`) service: tv tls: certresolver: letsencrypt services: tv: loadBalancer: servers: # wireguard IP address of media server - url: http://WIREGUARD_IP_OF_MEDIA_SERVER:8096 . After setting this up, you can visit your Jellyfin from anywhere you like. .",
            "url": "https://lsgrep.github.io/jellyfin/gpu/ubuntu/wifi/2020/01/25/Setting-Up-a-Media-Server-with-Jellyfin.html",
            "relUrl": "/jellyfin/gpu/ubuntu/wifi/2020/01/25/Setting-Up-a-Media-Server-with-Jellyfin.html",
            "date": " • Jan 25, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I do backend &amp; machine learning related projects. . Old medium blog .",
          "url": "https://lsgrep.github.io/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://lsgrep.github.io/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}